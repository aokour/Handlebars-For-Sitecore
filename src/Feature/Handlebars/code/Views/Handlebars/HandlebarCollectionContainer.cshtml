@using Sitecore.Mvc.Presentation
@using Sitecore.Mvc
@using SF.Foundation.Container
@using SF.Foundation.Structure
@using SF.Foundation.Components
@using SF.Feature.Handlebars
@using Sitecore.ContentSearch.Linq;

@model RenderingModel

@{
    List<Sitecore.Data.Items.Item> items = new List<Sitecore.Data.Items.Item>();
    Sitecore.Data.Items.Item container = Model.Item;

    string rootFolderId = container.Fields["Root Folder"].Value;
    if (!string.IsNullOrEmpty(rootFolderId))
    { 
        var rootFolder = Sitecore.Context.Database.GetItem(rootFolderId);
        if (Sitecore.Buckets.Managers.BucketManager.IsBucket(rootFolder))
        {
            var bucketPath = rootFolder.Paths.Path;
            //we got a bucket, use search API to get all children
            var tempItem = (Sitecore.ContentSearch.SitecoreIndexableItem)rootFolder;
            var index = Sitecore.ContentSearch.ContentSearchManager.GetIndex(tempItem);
            using (var context = index.CreateSearchContext())
            {
                var predicate = Sitecore.ContentSearch.Linq.Utilities.PredicateBuilder.True<Sitecore.ContentSearch.SearchTypes.SearchResultItem>();
                predicate = Sitecore.ContentSearch.Linq.Utilities.PredicateBuilder.And(predicate, item => item.Path.StartsWith(bucketPath));

                var query = context.GetQueryable<Sitecore.ContentSearch.SearchTypes.SearchResultItem>().Where(predicate);
                var results = query.GetResults();
                foreach (var result in results.Hits)
                {
                    var item = result.Document.GetItem();
                    items.Add(item);
                }
            }
        }
        else
        { 
            foreach (var child in rootFolder.GetChildren().Cast<Sitecore.Data.Items.Item>().ToList())
            {
                items.Add(child);
            }
        }
    }
    
    var additionalItems = (Sitecore.Data.Fields.MultilistField)container.Fields["Additional Items"];
    foreach(var item in additionalItems.GetItems())
    {
        items.Add(item);
    }

    bool enablePagination = ((Sitecore.Data.Fields.CheckboxField)container.Fields["Enable Pagination"]).Checked;
    int itemsPerPage = 10;
    int.TryParse(container.Fields["Items Per Page"].Value, out itemsPerPage);
    string queryStringParam = container.Fields["Querystring Parameter"].Value;
    int currentPage = 1;
    int.TryParse(HttpContext.Current.Request.QueryString[queryStringParam], out currentPage);
    currentPage = currentPage < 1 ? 1 : currentPage;

    int originalCount = items.Count;

    int numPages = Convert.ToInt32(Math.Ceiling((double) ((double)items.Count / (double)itemsPerPage)));
    
    if (enablePagination)
    {
        int skipItems = (currentPage - 1) * itemsPerPage;
        items = items.Skip(skipItems).Take(itemsPerPage).ToList();
    }

    HandlebarManager.SetupContainer(items);

    string currentUrl = HttpContext.Current.Request.Url.PathAndQuery;

    currentUrl = currentUrl.Replace(queryStringParam + "=" + currentPage, "");
    if (currentUrl.IndexOf("?") > -1)
    {
        if (!currentUrl.EndsWith("?") && !currentUrl.EndsWith("&"))
        { 
            currentUrl = currentUrl + "&";
        }
    }
    else
    {
        currentUrl = currentUrl + "?";        
    }
}

@using (Html.ComponentContainer("HandlebarContainer"))
{
    if (Sitecore.Context.PageMode.IsExperienceEditorEditing && items.Count == 0)
    {
        <div>No Items Found to bind to.</div>
    }
    
    @Html.Sitecore().DynamicPlaceholder("HandlebarTemplates")


    if (enablePagination && numPages > 1)
    {
        <ul class="pagination">
            @if (currentPage == 1)
            { 
                <li class="arrow unavailable"><a href="@(currentUrl)@(queryStringParam)=1">&laquo;</a></li>
            }
            else
            {
                <li class="arrow unavailable"><a href="@(currentUrl)@(queryStringParam)=@(currentPage-1)">&laquo;</a></li>
            }

            @for (int pageIndex = 1; pageIndex <= numPages; pageIndex++ )
            {
                if (pageIndex == currentPage)
                {
                    <li class="current"><a href="@(currentUrl)@(queryStringParam)=@pageIndex">@pageIndex</a></li>
                }
                else
                {
                    <li><a href="@(currentUrl)@(queryStringParam)=@pageIndex">@pageIndex</a></li>
                }
                
            }

            @if (currentPage == numPages)
            {
                <li class="arrow unavailable"><a href="@(currentUrl)@(queryStringParam)=@numPages">&raquo;</a></li>
            }
            else
            {
                <li class="arrow unavailable"><a href="@(currentUrl)@(queryStringParam)=@(currentPage + 1)">&raquo;</a></li>
            }
        </ul>
    }
}